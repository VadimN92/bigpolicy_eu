{"version":3,"file":"name-list.service.js","sourceRoot":"","sources":["../../../Users/rsiryk/dev/BP/qa-dev/tmp/broccoli_type_script_compiler-input_base_path-PZe5mwZO.tmp/0/src/app/shared/name-list/name-list.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,qBAA+B,eAAe,CAAC,CAAA;AAC/C,2BAA2B,iBAAiB,CAAC,CAAA;AAC7C,QAAO,0BAA0B,CAAC,CAAA;AAClC,QAAO,uBAAuB,CAAC,CAAA;AAE/B;;GAEG;AAEH;IAcE;;;;OAIG;IACH,yBAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QAjB9B;;;WAGG;QACH,UAAK,GAAa,EAAE,CAAC;IAaY,CAAC;IAElC;;;;OAIG;IACH,6BAAG,GAAH;QAAA,iBAaC;QAZC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,uBAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QACvC,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC;iBAC9C,GAAG,CAAC,UAAC,QAAkB,IAAK,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;iBAC5C,GAAG,CAAC,UAAC,IAAc;gBAClB,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC;gBACpB,MAAM,CAAC,KAAI,CAAC,KAAK,GAAG,IAAI,CAAC;YAC3B,CAAC,CAAC,CAAC;QACP,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED;;;OAGG;IACH,6BAAG,GAAH,UAAI,KAAa;QACf,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC;IAhDH;QAAC,iBAAU,EAAE;;uBAAA;IAiDb,sBAAC;AAAD,CAAC,AAhDD,IAgDC;AAhDY,uBAAe,kBAgD3B,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/from';\nimport 'rxjs/add/operator/map';\n\n/**\n * This class provides the NameList service with methods to read names and add names.\n */\n@Injectable()\nexport class NameListService {\n\n  /**\n   * The array of initial names provided by the service.\n   * @type {Array}\n   */\n  names: string[] = [];\n\n  /**\n   * Contains the currently pending request.\n   * @type {Observable<string[]>}\n   */\n  private request: Observable<string[]>;\n\n  /**\n   * Creates a new NameListService with the injected Http.\n   * @param {Http} http - The injected Http.\n   * @constructor\n   */\n  constructor(private http: Http) {}\n\n  /**\n   * Returns an Observable for the HTTP GET request for the JSON resource. If there was a previous successful request\n   * (the local names array is defined and has elements), the cached version is returned\n   * @return {string[]} The Observable for the HTTP request.\n   */\n  get(): Observable<string[]> {\n    if (this.names && this.names.length) {\n      return Observable.from([this.names]);\n    }\n    if (!this.request) {\n      this.request = this.http.get('/assets/data.json')\n        .map((response: Response) => response.json())\n        .map((data: string[]) => {\n          this.request = null;\n          return this.names = data;\n        });\n    }\n    return this.request;\n  }\n\n  /**\n   * Adds the given name to the array of names.\n   * @param {string} value - The name to add.\n   */\n  add(value: string): void {\n    this.names.push(value);\n  }\n}\n"]}